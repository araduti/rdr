// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Core Models
model Link {
    id          String   @id @default(cuid())
    url         String   // Original long URL
    shortCode   String   @unique // The short code (e.g., "abc123")
    domain      String   @default("rdr.nu") // Domain used for the short link
    title       String? // Optional title for the link
    description String? // Optional description
    
    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiresAt DateTime? // Optional expiration date
    
    // Security & Settings
    password    String? // Optional password protection
    clicks      Int     @default(0) // Total click count
    publicStats Boolean @default(false) // Whether stats are publicly viewable
    
    // Relationships
    userId String?
    user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    projectId String?
    project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
    
    // Analytics
    clickEvents ClickEvent[]
    tags        LinkTag[]
    
    @@index([shortCode])
    @@index([userId])
    @@index([projectId])
    @@index([domain, shortCode])
    @@index([createdAt])
}

model Project {
    id          String @id @default(cuid())
    name        String
    slug        String @unique
    description String?
    
    // Settings
    domain String @default("rdr.nu")
    logo   String?
    
    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relationships
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    links       Link[]
    invites     ProjectInvite[]
    members     ProjectMember[]
    domains     Domain[]
    
    @@index([userId])
    @@index([slug])
}

model Domain {
    id         String  @id @default(cuid())
    domain     String  @unique
    verified   Boolean @default(false)
    primary    Boolean @default(false)
    
    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relationships
    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    
    @@index([projectId])
}

model ClickEvent {
    id String @id @default(cuid())
    
    // Click metadata
    timestamp DateTime @default(now())
    ip        String?
    userAgent String?
    referer   String?
    
    // Geographic data
    country  String?
    region   String?
    city     String?
    
    // Device data
    device   String?
    browser  String?
    os       String?
    
    // UTM parameters
    utmSource   String?
    utmMedium   String?
    utmCampaign String?
    utmTerm     String?
    utmContent  String?
    
    // Relationships
    linkId String
    link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
    
    @@index([linkId])
    @@index([timestamp])
    @@index([country])
    @@index([device])
    @@index([browser])
}

model Tag {
    id    String @id @default(cuid())
    name  String
    color String @default("#6366f1")
    
    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relationships
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    links LinkTag[]
    
    @@unique([name, userId])
    @@index([userId])
}

model LinkTag {
    linkId String
    tagId  String
    
    link Link @relation(fields: [linkId], references: [id], onDelete: Cascade)
    tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
    
    @@id([linkId, tagId])
}

model ProjectMember {
    id   String @id @default(cuid())
    role String @default("member") // owner, admin, member
    
    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relationships
    userId    String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    
    @@unique([userId, projectId])
    @@index([projectId])
}

model ProjectInvite {
    id    String @id @default(cuid())
    email String
    role  String @default("member")
    
    // Metadata
    createdAt DateTime @default(now())
    expiresAt DateTime
    
    // Relationships
    projectId String
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    
    @@unique([email, projectId])
    @@index([projectId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    
    // Plan & Usage
    plan          String    @default("free") // free, pro, enterprise
    usageLimit    Int       @default(1000) // Monthly link creation limit
    
    // Metadata
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relationships
    accounts       Account[]
    sessions       Session[]
    links          Link[]
    projects       Project[]
    tags           Tag[]
    projectMembers ProjectMember[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
