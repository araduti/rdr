generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  User                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ClickEvent {
  id          String   @id
  timestamp   DateTime @default(now())
  ip          String?
  userAgent   String?
  referer     String?
  country     String?
  region      String?
  city        String?
  device      String?
  browser     String?
  os          String?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
  linkId      String
  Link        Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  @@index([browser])
  @@index([country])
  @@index([device])
  @@index([linkId])
  @@index([timestamp])
}

model Domain {
  id        String   @id
  domain    String   @unique
  verified  Boolean  @default(false)
  primary   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Link {
  id          String       @id
  url         String
  shortCode   String       @unique
  domain      String       @default("rdr.nu")
  title       String?
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  expiresAt   DateTime?
  password    String?
  clicks      Int          @default(0)
  publicStats Boolean      @default(false)
  userId      String?
  projectId   String?
  ClickEvent  ClickEvent[]
  Project     Project?     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  LinkTag     LinkTag[]

  @@index([createdAt])
  @@index([domain, shortCode])
  @@index([projectId])
  @@index([shortCode])
  @@index([userId])
}

model LinkTag {
  linkId String
  tagId  String
  Link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  Tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([linkId, tagId])
}

model Project {
  id            String          @id
  name          String
  slug          String          @unique
  description   String?
  domain        String          @default("rdr.nu")
  logo          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  userId        String
  Domain        Domain[]
  Link          Link[]
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProjectInvite ProjectInvite[]
  ProjectMember ProjectMember[]

  @@index([slug])
  @@index([userId])
}

model ProjectInvite {
  id        String   @id
  email     String
  role      String   @default("member")
  createdAt DateTime @default(now())
  expiresAt DateTime
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([email, projectId])
  @@index([projectId])
}

model ProjectMember {
  id        String   @id
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime
  userId    String
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([projectId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id        String    @id
  name      String
  color     String    @default("#6366f1")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  userId    String
  LinkTag   LinkTag[]
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@index([userId])
}

model User {
  id            String          @id
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  plan          String          @default("free")
  usageLimit    Int             @default(1000)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  Account       Account[]
  Link          Link[]
  Project       Project[]
  ProjectMember ProjectMember[]
  Session       Session[]
  Tag           Tag[]
}

model VerificationToken {
  id         String   @id
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
